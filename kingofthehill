pragma solidity ^0.4.24;



contract KingOfTheHill  {
    uint timeFrame;
    
    mapping (address => King) kings;
    
    constructor(uint _timeFrame) public {
        timeFrame = _timeFrame;
    }
    
    struct King {
        bytes16 fName;
    }
    
    address[] public kingAccts;
    bytes16[] public nameArray;
    
    event kingInfo(
       bytes16 fName
    );
    
     modifier isPlayable() {
       require(now % 1 hours > 0 && now % 1 hours < timeFrame * 1 minutes);
       _;
   }
   
    function setKing(address _address, bytes16 _fName) public isPlayable(){
        var king = kings[_address];
        king.fName = _fName;
        kingAccts.push(_address) -1;
        nameArray.push(_fName);
        kingInfo(_fName);
    }
    
    function getKings() view public returns(bytes16[]) {
        return nameArray;
    }
    
    function getKing(address _address) view public returns (bytes16) {
        return (kings[_address].fName);
    }
    
    function countKings() view public returns (uint) {
        return kingAccts.length;
    }
    
    function isplay() public view returns (uint) {
       if(now % 1 hours > 0 && now % 1 hours < timeFrame * 1 minutes)
           return 1;
       else
           return 0;
   }
   
   function whoIsKing() public view returns(bytes16){
       uint256 index = kingAccts.length -1;
       address lastAddress = kingAccts[index];
       return getKing(lastAddress);
   }
}